test_that("getap - deletions", {
tio <- "4 keys were deleted"
apf <- "ap_del_1.r"
expect_output(getap(apf), tio)
#
tio <- "10 keys were deleted"
apf <- "ap_del_2.r"
expect_output(getap(apf), tio)
}) # EOT
test_that("getap - additions & deletions", {
tio <- "4 keys were deleted"
apf <- "ap_del_add_1.r"
expect_output(getap(apf), tio)
#
tio <- "8 keys were deleted"
apf <- "ap_del_add_2.r"
expect_output(getap(apf), tio)
}) # EOT
# now all should be ok
fnv <- c("ap_add_1.r", "ap_add_2.r", "ap_del_1.r", "ap_del_2.r", "ap_del_add_1.r", "ap_del_add_2.r")
test_that("getap - now all good", {
for (i in seq_along(fnv)) {
expect_no_condition(getap(fnv[i]))
} # end for i
}) # EOT
test_that("getap - wrong arg", {
expect_error(getap(do.pcapca=T))
}) # EOT
#### ### ### ### ### ### ### ### ### ### ### ### ###
### Modify Analysis Procedure ###
test_that("modify ap", {
# spl.var
expect_no_condition(getap(spl.var="C_Group"))
# spl.do.csAvg
expect_no_condition(getap(spl.do.csAvg=TRUE))
expect_no_condition(getap(do.pca=T))
expect_no_condition(getap(do.sim=T))
expect_no_condition(getap(do.pls=T))
expect_no_condition(getap(do.aqg=T))
#
expect_no_condition(getap(do.da=T))
expect_no_condition(getap(do.rnf=T))
expect_no_condition(getap(do.svm=T))
expect_no_condition(getap(do.nnet=T))
#
expect_no_condition(getap(pg.where=""))
}) # EOT
# gpic: get pathToPackage Inst content
makePure <- function(sali) { # kicks out all the MQ samples, easier to count
ind <- which(sali$C_ECRM == "MQ")
out <- sali[-ind,]
#  print(paste0(nrow(out), " rows"))
return(out)
} # EOF
nrr <- function(sali) {
pu <- makePure(sali)
return(nrow(pu))
} # EOF
test_that("esl - wrong xlsx structure", { # that one is checking the folder structure
mdf <- "md_a_0err.r"
expect_error(esl(getmd(mdf), rnd = F, showFirstRows = F))
}) # EOT
test_that("esl - all errors", { # that one is checking the folder structure
mdf <- "blabla.R"
expect_error(esl(getmd(mdf), rnd = F, showFirstRows = F))
mdf <- "md_a_2.r"
expect_error(esl(getmd(mdf), form="aa", rnd = F, showFirstRows = F))
mdf <- "md_a_1err.R"
expect_error(esl(getmd(mdf), rnd = F, showFirstRows = F))
}) # EOT
test_that("esl - all good numbers", { # that one is checking the folder structure
mdf <- "md_a_1.r"
expect_equal(nrr(esl(getmd(mdf), rnd = F, showFirstRows =T)), 9)
mdf <- "md_a_2.r"
expect_equal(nrr(esl(getmd(mdf), rnd = F, showFirstRows = F)), 21)
mdf <- "md_a_3.r"
expect_equal(nrr(esl(getmd(mdf), form="txt", rnd = T, showFirstRows = F)), 33)
mdf <- "md_b_1.r"
expect_equal(nrr(esl(getmd(mdf), form="xls", rnd = F, showFirstRows = F)), 42)
mdf <- "md_b_2.r"
expect_equal(nrr(esl(getmd(mdf), rnd = F, showFirstRows = F, timeEstimate = T)), 105)
mdf <- "md_b_3.r"
expect_equal(nrr(esl(getmd(mdf), rnd = F, showFirstRows = F)), 105)
mdf <- "md_c_1.r"
expect_equal(nrr(esl(getmd(mdf), rnd = F, showFirstRows = F)), 432)
mdf <- "md_c_3.r"
expect_equal(nrr(esl(getmd(mdf), rnd = F, showFirstRows = F, timeEstimate = TRUE)), 2688)
mdf <- "md_KCl.r"
expect_equal(nrr(esl(getmd(mdf), rnd = F, showFirstRows = F)), 240)
mdf <- "md_d_1.r"
expect_equal(nrr(esl(getmd(mdf), rnd = F, showFirstRows = F, timeEstimate = TRUE)), 1728)
mdf <- "md_d_2.r"
expect_equal(nrr(esl(getmd(mdf), rnd = F, showFirstRows = F)), 1296)
}) # EOT
##################### clean up ######################
## delete all files in td metadata
allinMd <- list.files(paste0(expHomeF, "/metadata"))
allinMd
?file.remove()
##################### clean up ######################
## delete all files in td metadata
allinMd <- list.files(paste0(expHomeF, "/metadata"))
file.remove(allinMd)
##################### clean up ######################
## delete all files in td metadata
allinMd <- list.files(paste0(expHomeF, "/metadata"), full.names = TRUE)
file.remove(allinMd)
##################### clean up ######################
## delete all files in td metadata
allinMd <- list.files(paste0(expHomeF, "/metadata"), full.names = TRUE)
ok <- file.remove(allinMd)
ok
cpa()
##################### clean up ######################
## delete all files in td metadata
allinMd <- list.files(paste0(expHomeF, "/metadata"), full.names = TRUE)
ok <- file.remove(allinMd)
ls()
getwd()
td <- tempdir()
rootF <- paste0(td, "/ap2Test_R")
dir.create(rootF, showWarnings = FALSE)
expHomeF <- paste0(rootF, "/test@home")
dir.create(expHomeF, showWarnings = FALSE)
setwd(expHomeF)
ptp <- path.package("aquap2")
#
fn_inTempAsRenvSH <- "aquap2SH"
path_inTempAsRenvSH <- tePaSH <- paste0(rootF, "/", fn_inTempAsRenvSH)
dir.create(path_inTempAsRenvSH, showWarnings = FALSE)
# gpic: get package inst-folder content
gpic <- function() {
tp <- path.package("aquap2")
if (dir.exists(paste0(tp, "/inst"))) {
ptpInst <- paste0(tp, "/inst")
} else {
ptpInst <- tp
}
return(ptpInst)
} # EOF
library(aquap2)
9*5*5
library(aquap2)
library(aquap2)
?file.copy
library(testthat)
td <- tempdir()
rootF <- paste0(td, "/ap2Test_R")
dir.create(rootF, showWarnings = FALSE)
expHomeF <- paste0(rootF, "/test@home")
dir.create(expHomeF, showWarnings = FALSE)
setwd(expHomeF)
ptp <- path.package("aquap2")
apd()
ptp <- path.package("aquap2")
#
fn_inTempAsRenvSH <- "aquap2SH"
path_inTempAsRenvSH <- tePaSH <- paste0(rootF, "/", fn_inTempAsRenvSH)
dir.create(path_inTempAsRenvSH, showWarnings = FALSE)
# gpic: get package inst-folder content
gpic <- function() {
tp <- path.package("aquap2")
if (dir.exists(paste0(tp, "/inst"))) {
ptpInst <- paste0(tp, "/inst")
} else {
ptpInst <- tp
}
return(ptpInst)
} # EOF
td
## use xsComp for data import etc.
# first copy from examples/experiments/xsComp@home
exs <- "experiments"
xsCompFrom <- paste0(gpic(), "/", exs, "/xsComp@home")
file.copy(xsCompFrom, to=rootF, recursive = TRUE)
## use xsComp for data import etc.
# first copy from examples/experiments/xsComp@home
exs <- "examples/experiments"
xsCompFrom <- paste0(gpic(), "/", exs, "/xsComp@home")
file.copy(xsCompFrom, to=rootF, recursive = TRUE)
## use xsComp for data import etc.
# first copy from examples/experiments/xsComp@home
exs <- "examples/experiments"
xsCompFrom <- paste0(gpic(), "/", exs, "/xsComp@home")
ok <- file.copy(xsCompFrom, to=rootF, recursive = TRUE)
if (!ok) {stop()}
#### now import fine nice data
test_that("gfd basic", {
msg <- "Aligning temp. and rel.hum"
expect_output(gfd(trhLog = "ESPEC", ttl=F), msg)
expect_s4_class(gfd(), "aquap_data")
}) # EOT
getwd()
td <- tempdir()
rootF <- paste0(td, "/ap2Test_R")
dir.create(rootF, showWarnings = FALSE)
ptp <- path.package("aquap2")
#
fn_inTempAsRenvSH <- "aquap2SH"
path_inTempAsRenvSH <- tePaSH <- paste0(rootF, "/", fn_inTempAsRenvSH)
dir.create(path_inTempAsRenvSH, showWarnings = FALSE)
# gpic: get package inst-folder content
gpic <- function() {
tp <- path.package("aquap2")
if (dir.exists(paste0(tp, "/inst"))) {
ptpInst <- paste0(tp, "/inst")
} else {
ptpInst <- tp
}
return(ptpInst)
} # EOF
## use xsComp for data import etc.
# first copy from examples/experiments/xsComp@home
exs <- "examples/experiments"
xsCompHome <- "xsComp@home"
xsCompFrom <- paste0(gpic(), "/", exs, "/", xsCompHome)
cpxs <- function() {
ok <- file.copy(xsCompFrom, to=rootF, recursive = TRUE)
if (!ok) {stop()}
} # EOF
cpxs()
setwd(paste0(rootF, "/", xsCompHome))
#### now import fine nice data
test_that("gfd basic", {
msg <- "Aligning temp. and rel.hum"
expect_output(gfd(trhLog = "ESPEC", ttl=F), msg)
expect_s4_class(gfd(), "aquap_data")
}) # EOT
#### now import fine nice data
test_that("gfd basic", {
msg <- "Aligning temp. and rel.hum"
expect_output(gfd(trhLog = "ESPEC", ttl=F), msg)
expect_s4_class(gfd(), "aquap_data")
}) # EOT
?aquap2
getwd()
apd()
library(testthat)
td <- tempdir()
rootF <- paste0(td, "/ap2Test_R")
dir.create(rootF, showWarnings = FALSE)
ptp <- path.package("aquap2")
#
fn_inTempAsRenvSH <- "aquap2SH"
path_inTempAsRenvSH <- tePaSH <- paste0(rootF, "/", fn_inTempAsRenvSH)
dir.create(path_inTempAsRenvSH, showWarnings = FALSE)
# gpic: get package inst-folder content
gpic <- function() {
tp <- path.package("aquap2")
if (dir.exists(paste0(tp, "/inst"))) {
ptpInst <- paste0(tp, "/inst")
} else {
ptpInst <- tp
}
return(ptpInst)
} # EOF
## use xsComp for data import etc.
# first copy from examples/experiments/xsComp@home
exs <- "examples/experiments"
xsCompHome <- "xsComp@home"
xsCompFrom <- paste0(gpic(), "/", exs, "/", xsCompHome)
cpxs <- function() {
ok <- file.copy(xsCompFrom, to=rootF, recursive = TRUE)
if (!ok) {stop()}
} # EOF
cpxs()
setwd(paste0(rootF, "/", xsCompHome))
getwd()
#### now import fine nice data
test_that("gfd basic", {
msg <- "Aligning temp. and rel.hum"
expect_output(gfd(trhLog = "ESPEC", ttl=F), msg)
expect_s4_class(gfd(), "aquap_data")
print(getwd())
}) # EOT
apd()
?force
getwd()
pp <- c("peter", "Paul", "mary")
pp
paste0(getwd(), "/", pp)
list.files
?list.files
list.dirs()
?unlink
?download.file
?file.copy
apd()
aÃ¼d()
apd()
library(testthat)
td <- tempdir()
td
library(testthat)
td <- tempdir()
rootF <- paste0(td, "/ap2Test_R")
dir.create(rootF, showWarnings = FALSE)
# gpic: get package inst-folder content
gpic <- function() {
tp <- path.package("aquap2")
if (dir.exists(paste0(tp, "/inst"))) {
ptpInst <- paste0(tp, "/inst")
} else {
ptpInst <- tp
}
return(ptpInst)
} # EOF
ptp <- gpic()
#
fn_inTempAsRenvSH <- "aquap2SH"
path_inTempAsRenvSH <- tePaSH <- paste0(rootF, "/", fn_inTempAsRenvSH)
dir.create(path_inTempAsRenvSH, showWarnings = FALSE)
setwd(rootF)
########## download and install example experiments ##########
eNa <- "xsComp"
eWhere <- rootF
test_that("ap2dme", {
expect_error(ap2dme(paste0(eWhere, "/blabla"), eNa))
expect_true(ap2dme(eWhere, eNa))
expect_true(ap2dme(eWhere, eNa))
}) # EOT
ap2dme(paste0(eWhere, "/blabla"), eNa)
ap2dme(eWhere, eNa)
ap2dme(eWhere, eNa)
apd()
########## download and install example experiments ##########
eNa <- "xsComp"
eWhere <- rootF
test_that("ap2dme", {
expect_error(ap2dme(paste0(eWhere, "/blabla"), eNa))
expect_true(ap2dme(eWhere, eNa))
expect_equal(ap2dme(eWhere, eNa), NULL)
}) # EOT
ap2dme(eWhere, eNa)
eWhere <- rootF
ptmd <- paste0(td, "/", remRepName)
########## download and install example experiments ##########
remRepName <- "aquap2_Data-main"
eNa <- "xsComp"
eWhere <- rootF
ptmd <- paste0(td, "/", remRepName)
ptmd
if (dir.exists(ptmd)) {
unlink(ptmd, recursive=TRUE)
}# end if
test_that("ap2dme", {
expect_error(ap2dme(paste0(eWhere, "/blabla"), eNa))
expect_true(ap2dme(eWhere, eNa))
expect_equal(ap2dme(eWhere, eNa), NULL)
}) # EOT
test_that("ap2dme", {
expect_error(ap2dme(paste0(eWhere, "/blabla"), eNa))
expect_true(ap2dme(eWhere, eNa))
expect_equal(ap2dme(eWhere, eNa), NULL)
}) # EOT
test_that("ap2dme", {
expect_error(ap2dme(paste0(eWhere, "/blabla"), eNa))
expect_true(ap2dme(eWhere, eNa))
expect_equal(ap2dme(eWhere, eNa), NULL)
}) # EOT
########## download and install example experiments ##########
remRepName <- "aquap2_Data-main"
eNa <- "xsComp"
eWhere <- rootF
ptmd <- paste0(td, "/", remRepName)
if (dir.exists(ptmd)) {
unlink(ptmd, recursive=TRUE)
}# end if
test_that("ap2dme", {
expect_error(ap2dme(paste0(eWhere, "/blabla"), eNa))
expect_true(ap2dme(eWhere, eNa))
expect_equal(ap2dme(eWhere, eNa), NULL)
}) # EOT
ptxsc <- paste0(rootF, "/", eNa, "Å@home")
if (dir.exists(ptxsc)) {
unlink(ptxsc, recursive = TRUE)
}# end if
ptxsc <- paste0(rootF, "/", eNa, "Å@home")
ptxsc
ptxsc <- paste0(rootF, "/", eNa, "Å@home")
if (dir.exists(ptxsc)) {
unlink(ptxsc, recursive = TRUE)
}# end if
ptxsc <- paste0(rootF, "/", eNa, "Å@home")
if (dir.exists(ptxsc)) {
print("haha")
unlink(ptxsc, recursive = TRUE)
}# end if
ptxsc
ptxsc <- paste0(rootF, "/", eNa, "@home")
if (dir.exists(ptxsc)) {
unlink(ptxsc, recursive = TRUE)
}# end if
########## download and install example experiments ##########
remRepName <- "aquap2_Data-main"
eNa <- "xsComp"
eWhere <- rootF
ptmd <- paste0(td, "/", remRepName)
if (dir.exists(ptmd)) {
unlink(ptmd, recursive=TRUE)
}# end if
ptxsc <- paste0(rootF, "/", eNa, "@home")
if (dir.exists(ptxsc)) {
unlink(ptxsc, recursive = TRUE)
}# end if
test_that("ap2dme", {
expect_error(ap2dme(paste0(eWhere, "/blabla"), eNa))
expect_true(ap2dme(eWhere, eNa))
expect_equal(ap2dme(eWhere, eNa), NULL)
}) # EOT
ptmd <- paste0(td, "/", remRepName)
if (dir.exists(ptmd)) {
unlink(ptmd, recursive=TRUE)
}# end if
ptxsc <- paste0(rootF, "/", eNa, "@home")
if (dir.exists(ptxsc)) {
unlink(ptxsc, recursive = TRUE)
}# end if
test_that("ap2dme", {
expect_error(ap2dme(paste0(eWhere, "/blabla"), eNa))
expect_true(ap2dme(eWhere, eNa))
expect_equal(ap2dme(eWhere, eNa), NULL)
}) # EOT
ap2dme(eWhere, eNa, ffs=T)
test_that("ap2dme - forcing", {
expect_true(ap2dme(eWhere, eNa, ffs=T))
}) # EOT
ap2dme(eWhere, eNa, ffs=F, fdo=T)
apd()
ap2dme(eWhere, eNa, ffs=F, fdo=T)
ap2dme(eWhere, eNa, ffs=T, fdo=T)
ap2dme(eWhere, eNa, ffs=F, fdo=T)
ap2dme(eWhere, eNa, ffs=F, fdo=T)
ap2dme(eWhere, eNa, ffs=F, fdo=T)
ap2dme(eWhere, eNa, ffs=T, fdo=T)
test_that("ap2dme - forcing", {
expect_true(ap2dme(eWhere, eNa, ffs=T))
expect_equal(ap2dme(eWhere, eNa, ffs=F, fdo=T), NULL)
expect_true(ap2dme(eWhere, eNa, ffs=T, fdo=T))
}) # EOT
########## download and install example experiments ##########
remRepName <- "aquap2_Data-main"
eNa <- "xsComp"
eWhere <- rootF
ptmd <- paste0(td, "/", remRepName)
if (dir.exists(ptmd)) {
unlink(ptmd, recursive=TRUE)
}# end if
ptxsc <- paste0(rootF, "/", eNa, "@home")
if (dir.exists(ptxsc)) {
unlink(ptxsc, recursive = TRUE)
}# end if
test_that("ap2dme", {
expect_error(ap2dme(paste0(eWhere, "/blabla"), eNa))
expect_true(ap2dme(eWhere, eNa))
expect_equal(ap2dme(eWhere, eNa), NULL)
}) # EOT
test_that("ap2dme - forcing", {
expect_true(ap2dme(eWhere, eNa, ffs=T))
expect_equal(ap2dme(eWhere, eNa, ffs=F, fdo=T), NULL)
expect_true(ap2dme(eWhere, eNa, ffs=T, fdo=T))
}) # EOT
getwd()
xsCompHome <- "xsComp@home"
setwd(paste0(rootF, "/", xsCompHome))
getwd()
list.files()
gfd(trhLog = "ESPEC", ttl=F)
gfd(trhLog = "ESPEC", ttl=F)
test_that("gfd basic", {
msg <- "Aligning temp. and rel.hum"
expect_output(gfd(trhLog = "ESPEC", ttl=F), msg)
expect_s4_class(gfd(), "aquap_data")
}) # EOT
unlink(paaste0(ptxsc, "/rawdata"), recursive=TRUE)
unlink(paste0(ptxsc, "/rawdata"), recursive=TRUE)
#### ### ### ### ### ### ### ### ### ### ### ### ###
### download and install example experiments ###
remRepName <- "aquap2_Data-main"
eNa <- "xsComp"
eWhere <- rootF
ptmd <- paste0(td, "/", remRepName)
if (dir.exists(ptmd)) {
unlink(ptmd, recursive=TRUE)
}# end if
ptxsc <- paste0(rootF, "/", eNa, "@home")
if (dir.exists(ptxsc)) {
unlink(ptxsc, recursive = TRUE)
}# end if
test_that("ap2dme", {
expect_error(ap2dme(paste0(eWhere, "/blabla"), eNa))
expect_true(ap2dme(eWhere, eNa))
expect_equal(ap2dme(eWhere, eNa), NULL)
unlink(paste0(ptxsc, "/rawdata"), recursive=TRUE)
expect_true(ap2dme(eWhere, eNa))
}) # EOT
test_that("ap2dme - forcing", {
expect_true(ap2dme(eWhere, eNa, ffs=T))
expect_equal(ap2dme(eWhere, eNa, ffs=F, fdo=T), NULL)
expect_true(ap2dme(eWhere, eNa, ffs=T, fdo=T))
}) # EOT
#### ### ### ### ### ### ### ### ### ### ### ### ###
### import data ###
xsCompHome <- "xsComp@home"
setwd(paste0(rootF, "/", xsCompHome))
test_that("gfd basic", {
msg <- "Aligning temp. and rel.hum"
expect_output(gfd(trhLog = "ESPEC", ttl=F), msg)
expect_s4_class(gfd(), "aquap_data")
}) # EOT
library(aquap2)
apd()
